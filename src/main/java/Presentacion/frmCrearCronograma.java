package Presentacion;

import Entidades.EModuloCronograma;
import Entidades.EPrograma;
import LogicaNegocios.CronogramaBLO;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sergio
 */
public class frmCrearCronograma extends javax.swing.JDialog {

    static ArrayList<EModuloCronograma> listaModulosProgramas = new ArrayList<>();
    DefaultTableModel modelo;
    EPrograma programa;
    frmCronograma visCrono = new frmCronograma();
    List<EModuloCronograma> listaMC = visCrono.getListaMC();
    static ArrayList<EModuloCronograma> listaModulosParalela = new ArrayList<>();
    static boolean simultaneo = false;

    /**
     * Creates new form frmCrearCronograma
     */
    public frmCrearCronograma(java.awt.Frame parent, boolean modal, boolean actualizar) {
        super(parent, modal);
        initComponents();
        try {
            if (listaMC != null && actualizar == true) {
                listaModulosProgramas = (ArrayList<EModuloCronograma>) listaMC;

            }
            if (actualizar) {
                btnRecalcalcular.setEnabled(true);
                txtCodigo.setText(listaMC.get(0).getPrograma().getCodigo());
                txtNombre.setText(listaMC.get(0).getPrograma().getNombrePrograma());
                programa = listaMC.get(0).getPrograma();
                actualizarTableParalela(listaModulosProgramas);
            }
            llenarTabla("");
            llenarTablaP("");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        Date datenow = Calendar.getInstance().getTime();
        SpinnerDateModel smb = new SpinnerDateModel(datenow, null, null, Calendar.HOUR_OF_DAY);
        txtfecha.setModel(smb);
        JSpinner.DateEditor d = new JSpinner.DateEditor(txtfecha, "yyyy-MM-dd");
        txtfecha.setEditor(d);
    }

    private frmCrearCronograma(JFrame jFrame, boolean b) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaModulosProgramas = new javax.swing.JTable();
        btnAddModulosP = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaModulosProgramasP = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnBuscarPrograma = new javax.swing.JButton();
        txtNombre = new javax.swing.JTextField();
        txtCodigo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtfecha = new javax.swing.JSpinner();
        jPanel1 = new javax.swing.JPanel();
        btnGuardar = new javax.swing.JButton();
        btnRecalcalcular = new javax.swing.JButton();
        btnRegresar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tablaModulosProgramas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaModulosProgramas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaModulosProgramasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaModulosProgramas);

        btnAddModulosP.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnAddModulosP.setText("Añadir modulo");
        btnAddModulosP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddModulosPActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 0, 0));
        jLabel1.setText("Nota: Debe de añadir el orden correcto de los cursos. Los cursos se calculas segun el orden ingresado");

        tablaModulosProgramasP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaModulosProgramasP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaModulosProgramasPMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tablaModulosProgramasP);

        jLabel2.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel2.setText("Modulo. Para agregar o modulo en simultaneo o actualizar un modulo precione doble click en la tabla");

        jLabel6.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        jLabel6.setText("Modulo paralelo");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 743, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAddModulosP, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 1290, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 650, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 650, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(2, 6, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 650, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(205, 205, 205)))))
                .addGap(16, 16, 16))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(btnAddModulosP, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(61, 61, 61))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnBuscarPrograma.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        btnBuscarPrograma.setText("Seleccionar programa");
        btnBuscarPrograma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarProgramaActionPerformed(evt);
            }
        });

        txtNombre.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        txtNombre.setEnabled(false);

        txtCodigo.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        txtCodigo.setEnabled(false);

        jLabel3.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel3.setText("Código");

        jLabel4.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel4.setText("Nombre");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(btnBuscarPrograma, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58)
                .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(jLabel4)
                        .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnBuscarPrograma))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel5.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel5.setText("Fecha de inicio");

        txtfecha.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.DAY_OF_WEEK));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(528, 528, 528)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(txtfecha, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtfecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 12, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnGuardar.setBackground(new java.awt.Color(255, 255, 204));
        btnGuardar.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnRecalcalcular.setBackground(new java.awt.Color(255, 255, 204));
        btnRecalcalcular.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        btnRecalcalcular.setText("Recalcular cronograma");
        btnRecalcalcular.setEnabled(false);
        btnRecalcalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnRegresar.setBackground(new java.awt.Color(255, 255, 204));
        btnRegresar.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        btnRegresar.setText("Regresar");
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(584, Short.MAX_VALUE)
                .addComponent(btnRecalcalcular, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(310, 310, 310)
                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(53, 53, 53)
                    .addComponent(btnRegresar, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(1069, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                    .addComponent(btnRecalcalcular, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(btnRegresar, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarProgramaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarProgramaActionPerformed
        frmBuscarProgramas vistaBuscarProgramas = new frmBuscarProgramas(null, true);
        vistaBuscarProgramas.setLocationRelativeTo(this);

        vistaBuscarProgramas.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent wE) {
                try {
                    CronogramaBLO cronogramaBLO = new CronogramaBLO();
                    programa = vistaBuscarProgramas.getPrograma();
                    if (programa != null) {
                        if (cronogramaBLO.listar("p.idPrograma = " + programa.getIdPrograma()).isEmpty()) {
                            txtNombre.setText(programa.getNombrePrograma());
                            txtCodigo.setText(programa.getCodigo());
                        } else {
                            JOptionPane.showMessageDialog(null, "Este programa no se puede escoger porque ya tiene módulos");
                        }

                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
                }
            }

        });
        vistaBuscarProgramas.setVisible(true);
    }//GEN-LAST:event_btnBuscarProgramaActionPerformed

    private void btnAddModulosPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddModulosPActionPerformed
        frmCrearModuloPrograma vistaAddModulo = new frmCrearModuloPrograma(null, true, null, 0, false);
        vistaAddModulo.setLocationRelativeTo(this);
        vistaAddModulo.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent wE) {
                try {
                    if (vistaAddModulo.getModuloCronograma().getModulo() != null && vistaAddModulo.getModuloCronograma().getProfesor().get(0) != null) {
                        if (compararModulos(listaModulosProgramas, vistaAddModulo.getModuloCronograma()) == false) {
                            listaModulosProgramas.add(vistaAddModulo.getModuloCronograma());
                            if (simultaneo == false) {
                                listaModulosParalela.add(vistaAddModulo.getModuloCronograma());
                            }
                            if (!listaModulosProgramas.isEmpty()) {
                                llenarTabla("");
                                llenarTablaP("");
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "El módulo ingresado ya es parte del programa");
                        }
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
                }
            }
        });
        vistaAddModulo.setVisible(true);
    }//GEN-LAST:event_btnAddModulosPActionPerformed

    private void tablaModulosProgramasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaModulosProgramasMouseClicked
        if (evt.getClickCount() == 2) {
            int row = tablaModulosProgramas.rowAtPoint(evt.getPoint());
            frmCrearModuloPrograma vistaAddModulo = new frmCrearModuloPrograma(null, true, listaModulosProgramas.get(row), row, false);
            vistaAddModulo.setLocationRelativeTo(this);
            vistaAddModulo.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosed(WindowEvent wE) {
                    try {
                        if (vistaAddModulo.getModuloCronograma().getModulo() != null && vistaAddModulo.getModuloCronograma().getProfesor().get(0) != null) {
                            if (vistaAddModulo.isBorrar()) {
                                listaModulosProgramas.remove(row);
                                listaModulosParalela.remove(row);

                            } else {

                                listaModulosProgramas.set(row, vistaAddModulo.getModuloCronograma());
                            }
                            llenarTabla("");
                            llenarTablaP("");
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
                    }
                }
            });
            vistaAddModulo.setVisible(true);
        }

    }//GEN-LAST:event_tablaModulosProgramasMouseClicked

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        try {
            if (!listaModulosProgramas.isEmpty()) {

                if (programa != null) {
                    CronogramaBLO cronogramaBLO = new CronogramaBLO();
                    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");

                    for (EModuloCronograma listaModulosPrograma : listaModulosProgramas) {
                        listaModulosPrograma.setPrograma(programa);
                    }
                    for (EModuloCronograma listaModulosPrograma : listaModulosParalela) {
                        listaModulosPrograma.setPrograma(programa);
                    }
                    String msj = cronogramaBLO.recibirModulos(listaModulosProgramas, listaModulosParalela, formatter.format(txtfecha.getValue()));
                    JOptionPane.showMessageDialog(null, msj);

                } else {
                    JOptionPane.showMessageDialog(null, "Debe de seleccionar un programa");
                }

            } else {
                JOptionPane.showMessageDialog(null, "Debe de ingresar modulos para calcular el cronograma");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }

    }//GEN-LAST:event_btnGuardarActionPerformed

    private void tablaModulosProgramasPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaModulosProgramasPMouseClicked
        if (evt.getClickCount() == 2) {
            int row = tablaModulosProgramasP.rowAtPoint(evt.getPoint());
            frmCrearModuloPrograma vistaAddModulo = new frmCrearModuloPrograma(null, true, listaModulosParalela.get(row), row, true);
            vistaAddModulo.setLocationRelativeTo(this);
            vistaAddModulo.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosed(WindowEvent wE) {
                    try {
                        if (vistaAddModulo.getModuloCronograma().getModulo() != null && vistaAddModulo.getModuloCronograma().getProfesor().get(0) != null) {
                            if (vistaAddModulo.isBorrar()) {
                                listaModulosParalela.set(row, listaModulosProgramas.get(row));
                            } else {
                                listaModulosParalela.set(row, vistaAddModulo.getModuloCronograma());
                            }
                            llenarTabla("");
                            llenarTablaP("");
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
                    }
                }
            });
            vistaAddModulo.setVisible(true);
        }


    }//GEN-LAST:event_tablaModulosProgramasPMouseClicked

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        listaModulosParalela.clear();
        listaModulosProgramas.clear();
        this.dispose();

    }//GEN-LAST:event_btnRegresarActionPerformed

    private void llenarTabla(String condition) throws Exception {
        CronogramaBLO cronogramaBLO = new CronogramaBLO();

        Object[] row = new Object[5];

        limpiarTabla();
        try {
            for (EModuloCronograma cronograma : listaModulosProgramas) {
                row[0] = cronograma.getProfesor().get(0);
                row[1] = cronograma.getModulo();
                row[2] = cronograma.getHoraInicio();
                row[3] = cronograma.getHoraFin();
                row[4] = cronograma.getEstado();

                modelo.addRow(row);
                tablaModulosProgramas.setFont(new java.awt.Font("Tahoma", 0, 14));
                tablaModulosProgramas.setRowHeight(40);
            }
        } catch (Exception e) {
            throw e;
        }
    }

    private void limpiarTabla() {
        modelo = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int colum) {
                return false;
            }
        };
        modelo.addColumn("Profesor");
        modelo.addColumn("Modulos");
        modelo.addColumn("Hora inicio");
        modelo.addColumn("Hora fin");
        modelo.addColumn("Estado");
        tablaModulosProgramas.getTableHeader().setFont(new Font("Cooper Black", 1, 16));
        tablaModulosProgramas.getTableHeader().setBackground(Color.cyan);
        tablaModulosProgramas.getTableHeader().setForeground(Color.BLACK);
        DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
        tcr.setHorizontalAlignment(SwingConstants.CENTER);
        tablaModulosProgramas.getColumnModel().getColumn(0).setCellRenderer(tcr);
        tablaModulosProgramas.setModel(modelo);
    }

    private void llenarTablaP(String condition) throws Exception {
        CronogramaBLO cronogramaBLO = new CronogramaBLO();

        Object[] row = new Object[5];

        limpiarTablaP();
        try {

            for (EModuloCronograma eModuloCronograma : listaModulosParalela) {
                if (!listaModulosProgramas.contains(eModuloCronograma)) {
                    row[0] = eModuloCronograma.getProfesor().get(0);
                    row[1] = eModuloCronograma.getModulo();
                    row[2] = eModuloCronograma.getHoraInicio();
                    row[3] = eModuloCronograma.getHoraFin();
                    row[4] = eModuloCronograma.getEstado();

                    modelo.addRow(row);
                    tablaModulosProgramasP.setFont(new java.awt.Font("Tahoma", 0, 14));
                    tablaModulosProgramasP.setRowHeight(40);
                } else {
                    row[0] = "No curso paralelo";
                    row[1] = "No curso paralelo";
                    row[2] = "No curso paralelo";
                    row[3] = "No curso paralelo";
                    row[4] = "No curso paralelo";

                    modelo.addRow(row);
                    tablaModulosProgramasP.setFont(new java.awt.Font("Tahoma", 0, 14));
                    tablaModulosProgramasP.setRowHeight(40);
                }
            }

        } catch (Exception e) {
            throw e;
        }
    }

    private void limpiarTablaP() {
        modelo = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int colum) {
                return false;
            }
        };
        modelo.addColumn("Profesor");
        modelo.addColumn("Modulos");
        modelo.addColumn("Hora inicio");
        modelo.addColumn("Hora fin");
        modelo.addColumn("Estado");
        tablaModulosProgramasP.getTableHeader().setFont(new Font("Cooper Black", 1, 16));
        tablaModulosProgramasP.getTableHeader().setBackground(Color.cyan);
        tablaModulosProgramasP.getTableHeader().setForeground(Color.BLACK);
        DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
        tcr.setHorizontalAlignment(SwingConstants.CENTER);
        tablaModulosProgramasP.getColumnModel().getColumn(0).setCellRenderer(tcr);
        tablaModulosProgramasP.setModel(modelo);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmCrearCronograma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmCrearCronograma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmCrearCronograma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmCrearCronograma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                frmCrearCronograma dialog = new frmCrearCronograma(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
            }
        });
    }

    public boolean compararModulos(ArrayList<EModuloCronograma> listaModulosProgramas, EModuloCronograma modulo) {
        boolean existe = false;

        for (EModuloCronograma listaModulosPrograma : listaModulosProgramas) {
            if (modulo.getModulo().getIdModulo() == listaModulosPrograma.getModulo().getIdModulo()) {
                existe = true;
                return existe;
            }
        }

        return existe;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddModulosP;
    private javax.swing.JButton btnBuscarPrograma;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnRecalcalcular;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tablaModulosProgramas;
    private javax.swing.JTable tablaModulosProgramasP;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JSpinner txtfecha;
    // End of variables declaration//GEN-END:variables

    private void actualizarTableParalela(List<EModuloCronograma> listaModulosProgramas) {
        try {
            for (int i = 0; i < listaModulosProgramas.size(); i++) {
                if (revisarSiEsModPar(listaModulosProgramas.get(i))) {

                } else {
                    listaModulosParalela.add(listaModulosProgramas.get(i));
                }
            }
        } catch (Exception e) {
            throw e;
        }

    }

    private boolean revisarSiEsModPar(EModuloCronograma eModuloCronograma) {
        for (EModuloCronograma eModuloCronograma1 : listaModulosProgramas) {
            if (eModuloCronograma1 != eModuloCronograma) {
                if (eModuloCronograma.getFechaInicio().equals(eModuloCronograma1.getFechaInicio())) {
                    listaModulosProgramas.remove(eModuloCronograma1);
                    listaModulosParalela.add(eModuloCronograma1);
                    return true;
                }
            }
        }
        return false;
    }
}
